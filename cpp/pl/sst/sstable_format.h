// Copyright (c) 2024 The Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Authors: liubang (it.liubang@gmail.com)

#pragma once

#include "cpp/pl/fs/fs.h"
#include "cpp/pl/lang/assume.h"
#include "cpp/pl/status/result.h"

#include <cstdint>
#include <sstream>
#include <string>
#include <string_view>

namespace pl {

inline constexpr std::size_t FOOTER_LEN = 60;
inline constexpr uint32_t SST_MAGIC_NUMBER = 0x00545353;       // the hex of 'SST'
inline constexpr uint32_t BLOCK_TRAILER_LEN = 5;               // compression type (1B) + crc (4B)
inline constexpr uint32_t FILE_META_MAGIC_NUMBER = 0x4154454d; // the hex of 'META'
inline constexpr uint32_t FILE_META_MIN_LEN = 67;

// clang-format off
#define PL_ENUM_TO_STRING_CASE(t, v) case t::v: return #v
// clang-format on

// clang-format off
enum class SSTType : uint8_t {
    NONE   = 0,   // invalid sst type
    MEMORY = 1,   // the sst file is generated by memory dump
    MINOR  = 2,   // the sst file is generaged by minor compaction
    MAJOR  = 3,   // the sst file is generated by major compaction
};
// clang-format on

[[nodiscard]] constexpr const char* toString(SSTType t) noexcept {
    switch (t) {
        PL_ENUM_TO_STRING_CASE(SSTType, NONE);
        PL_ENUM_TO_STRING_CASE(SSTType, MEMORY);
        PL_ENUM_TO_STRING_CASE(SSTType, MINOR);
        PL_ENUM_TO_STRING_CASE(SSTType, MAJOR);
    }
    pl::assume_unreachable();
}

enum class SSTVersion : uint8_t {
    NONE = 0,
    V1 = 1, // current sst version is V1
};

[[nodiscard]] constexpr const char* toString(SSTVersion t) noexcept {
    switch (t) {
        PL_ENUM_TO_STRING_CASE(SSTVersion, NONE);
        PL_ENUM_TO_STRING_CASE(SSTVersion, V1);
    }
    pl::assume_unreachable();
}

// clang-format off
enum class FilterPolicyType : uint8_t {
    NONE                  = 0,
    STANDARD_BLOOM_FILTER = 1,
    BLOCKED_BLOOM_FILTER  = 2,
    END                   = 2,
};
// clang-format on

[[nodiscard]] constexpr const char* toString(FilterPolicyType t) noexcept {
    switch (t) {
        PL_ENUM_TO_STRING_CASE(FilterPolicyType, NONE);
        PL_ENUM_TO_STRING_CASE(FilterPolicyType, STANDARD_BLOOM_FILTER);
        PL_ENUM_TO_STRING_CASE(FilterPolicyType, BLOCKED_BLOOM_FILTER);
    }
    pl::assume_unreachable();
}

// clang-format off
enum class CompressionType : uint8_t {
    NONE   = 0,
    SNAPPY = 1,
    ZSTD   = 2,
    ISAL   = 3,
};
// clang-format on

[[nodiscard]] constexpr const char* toString(CompressionType t) noexcept {
    switch (t) {
        PL_ENUM_TO_STRING_CASE(CompressionType, NONE);
        PL_ENUM_TO_STRING_CASE(CompressionType, SNAPPY);
        PL_ENUM_TO_STRING_CASE(CompressionType, ZSTD);
        PL_ENUM_TO_STRING_CASE(CompressionType, ISAL);
    }
    pl::assume_unreachable();
}

#undef PL_ENUM_TO_STRING_CASE

// patch id 单调递增
using PatchId = uint64_t;
using SSTId = uint64_t;

/**
 * @class BlockHandle
 * @brief 主要是用来构造索引的
 */
class BlockHandle {
public:
    static constexpr uint64_t INVALID_VALUE = ~static_cast<uint64_t>(0);

    BlockHandle() : offset_(INVALID_VALUE), size_(INVALID_VALUE) {}

    [[nodiscard]] uint64_t offset() const { return offset_; }

    [[nodiscard]] uint64_t size() const { return size_; }

    [[nodiscard]] bool isValid() const noexcept {
        return offset_ != INVALID_VALUE && size_ != INVALID_VALUE;
    }

    void setOffset(uint64_t offset) { offset_ = offset; }

    void setSize(uint64_t size) { size_ = size; }

    void reset() noexcept { offset_ = size_ = INVALID_VALUE; }

    void encodeTo(std::string* dst) const;

    [[nodiscard]] Result<Void> decodeFrom(std::string_view input);

private:
    uint64_t offset_;
    uint64_t size_;
};

/**
 * @class FileMeta
 * @brief record sst file meta data
 */
class FileMeta {
public:
    FileMeta() = default;

    // 移动构造和赋值
    FileMeta(FileMeta&&) = default;
    FileMeta& operator=(FileMeta&&) = default;

    // 禁用拷贝构造和赋值
    FileMeta(const FileMeta&) = delete;
    FileMeta& operator=(const FileMeta&) = delete;

    void setSSTType(SSTType type) { sst_type_ = type; }

    void setSSTVersion(SSTVersion version) { sst_version_ = version; }

    void setPatchId(PatchId patch_id) { patch_id_ = patch_id; }

    void setSSTId(SSTId sst_id) { sst_id_ = sst_id; }

    void setFilterPolicyType(FilterPolicyType type) { filter_type_ = type; }

    void setCellNum(uint64_t cell_number) { cell_number_ = cell_number; }

    void setRowNum(uint64_t row_number) { row_number_ = row_number; }

    void setMinTimestamp(uint64_t min_timestamp) { min_timestamp_ = min_timestamp; }

    void setMaxTimestamp(uint64_t max_timestamp) { max_timestamp_ = max_timestamp; }

    void setMinKey(const std::string& key) { min_key_ = key; }

    void setMaxKey(const std::string& key) { max_key_ = key; }

    void setBitsPerKey(uint32_t bpk) { bits_per_key_ = bpk; }

    [[nodiscard]] SSTType sstType() const { return sst_type_; }

    [[nodiscard]] SSTVersion sstVersion() const { return sst_version_; }

    [[nodiscard]] PatchId patchId() const { return patch_id_; }

    [[nodiscard]] SSTId sstId() const { return sst_id_; }

    [[nodiscard]] FilterPolicyType filterPolicyType() const { return filter_type_; }

    [[nodiscard]] uint64_t cellNum() const { return cell_number_; }

    [[nodiscard]] uint64_t rowNum() const { return row_number_; }

    [[nodiscard]] uint64_t minTimestamp() const { return min_timestamp_; }

    [[nodiscard]] uint64_t maxTimestamp() const { return max_timestamp_; }

    [[nodiscard]] const std::string& minKey() const { return min_key_; }

    [[nodiscard]] const std::string& maxKey() const { return max_key_; }

    [[nodiscard]] uint32_t bitsPerKey() const { return bits_per_key_; }

    void encodeTo(std::string* dst) const;

    Result<Void> decodeFrom(std::string_view input);

    [[nodiscard]] std::string toString() const {
        std::stringstream ss;
        ss << "SST Type: " << pl::toString(sst_type_) << '\n'
           << "SST Version: " << pl::toString(sst_version_) << '\n'
           << "Patch ID: " << patch_id_ << '\n'
           << "SST ID: " << sst_id_ << '\n'
           << "Filter Type: " << pl::toString(filter_type_) << '\n'
           << "Bits Per Key: " << bits_per_key_ << '\n'
           << "Cell Number: " << cell_number_ << '\n'
           << "Row Number: " << row_number_ << '\n'
           << "Min Timestamp: " << min_timestamp_ << '\n'
           << "Max Timestamp: " << max_timestamp_ << '\n'
           << "Min Key: " << min_key_ << '\n'
           << "Max Key: " << max_key_;
        return ss.str();
    }

private:
    SSTType sst_type_{SSTType::NONE};
    SSTVersion sst_version_{SSTVersion::NONE};
    PatchId patch_id_{0};
    SSTId sst_id_{0};
    FilterPolicyType filter_type_{FilterPolicyType::NONE};
    uint32_t bits_per_key_{0};
    uint64_t cell_number_{0};
    uint64_t row_number_{0};
    uint64_t min_timestamp_{0};
    uint64_t max_timestamp_{0};
    std::string min_key_;
    std::string max_key_;
};

using FileMetaPtr = std::unique_ptr<FileMeta>;
using FileMetaRef = std::shared_ptr<FileMeta>;

class Footer {
public:
    Footer() = default;

    void setFilterHandle(const BlockHandle& block_handle) { filter_handle_ = block_handle; }
    void setIndexHandle(const BlockHandle& block_handle) { index_handle_ = block_handle; }
    void setFileMetaHandle(const BlockHandle& block_handle) { file_meta_handle_ = block_handle; }

    [[nodiscard]] const BlockHandle& metaIndexHandle() const { return filter_handle_; }
    [[nodiscard]] const BlockHandle& filterHandle() const { return filter_handle_; }
    [[nodiscard]] const BlockHandle& indexHandle() const { return index_handle_; }
    [[nodiscard]] const BlockHandle& fileMetaHandle() const { return file_meta_handle_; }

    void encodeTo(std::string* dst) const;
    [[nodiscard]] Result<Void> decodeFrom(std::string_view input);

private:
    BlockHandle filter_handle_;
    BlockHandle index_handle_;
    BlockHandle file_meta_handle_;
};

struct BlockContents {
    std::string_view data;
    bool cachable;
    bool heap_allocated;
};

class BlockReader {
public:
    BlockReader() = delete; // 静态类，禁止实例化

    static Result<BlockContents> readBlock(const FileSystemRef& reader,
                                           const FileDescriptorRef& fd,
                                           const BlockHandle& handle);
};

} // namespace pl
